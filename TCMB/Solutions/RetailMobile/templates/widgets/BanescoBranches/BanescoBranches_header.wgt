<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCu7Hj-YJAiNdhAng61lk5aYyK7ekQwiLQ&libraries=places"></script>
<script>
    window.com = window.com || {};
    window.com.widgets = window.com.widgets || {};
    window.com.widgets.BanescoMap = window.com.widgets.BanescoMap || {};

    window.com.widgets.BanescoMap = (function () {
        var _map,
            _currentLocation,
            _mapMountNode,
            _infowindow,
            _markers,
            _placesSearchResult,
            _directionsDisplay;

        function init(mapMountNode, currentLocation, mapConfig) {
            _mapMountNode = mapMountNode;
            _currentLocation = currentLocation;
            _infowindow = new google.maps.InfoWindow();
            _markers = [];
            var defaultMapConfig = {
                center: _currentLocation,
                zoom: 15
            };
            
            var mergedMapConfig = Object.assign({}, defaultMapConfig, mapConfig)
            _map = new google.maps.Map(_mapMountNode, mergedMapConfig);

            return this;
        }

        function getMap() {
            return _map;
        }

        function addMarkerForPlace(place) {
            var marker = new google.maps.Marker({
                map: _map,
                position: place.geometry.location
            });
            _markers.push(marker);

            google.maps.event.addListener(marker, 'click', function () {
                _infowindow.setContent(place.name);
                _infowindow.open(_map, this);
            });
        }

        function removeMarker(marker) {
            marker.setMap(null);
        }

        function removeAllMarkers() {
            _markers.forEach(removeMarker)
        }

        function search(config, successCalback, errorCallback) {
            var placesService = new google.maps.places.PlacesService(_map);
            var defaultConfig = {
                location: _currentLocation,
                rankBy: google.maps.places.RankBy.DISTANCE
            };

            var mergedConfig = Object.assign({}, defaultConfig, config);

            placesService.textSearch(mergedConfig, function (results, status) {
                if (status == google.maps.places.PlacesServiceStatus.OK) {
                    _placesSearchResult = results;
                    if (config.locateInMap) {
                        _placesSearchResult.forEach(function (place) {
                            addMarkerForPlace(place)
                        })
                    }
                    successCalback(results)
                } else {
                    errorCallback(results)
                }
            })
        }

        function calculateDistance(config, successCalback) {
            var destinations = _placesSearchResult.map(function (place) {
                return place.geometry.location
            })
            var defaultConfig = {
                origins: [_currentLocation],
                destinations: destinations,
                travelMode: 'DRIVING'
            }

            var mergedConfig = Object.assign({}, defaultConfig, config);

            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix(mergedConfig, function distanceMatrixResponse(response, status) {
                var placeDistanceList = []
                for (var j = 0; j < response.rows[0].elements.length; j++) {
                    placeDistanceList.push({
                        place: _placesSearchResult[j],
                        distance: response.rows[0].elements[j]
                    })
                }
                placeDistanceList.sort(function (a, b) {
                    return a.distance.distance.value > b.distance.distance.value ? 1 : -1
                })
                successCalback(placeDistanceList)
            });
        }

        function renderRouteTo(place, _config) {
            var config = _config ? _config : {}
            if (_directionsDisplay) {
                _directionsDisplay.setMap(null);
            }
            var directionsService = new google.maps.DirectionsService;
            _directionsDisplay = new google.maps.DirectionsRenderer({
                suppressMarkers: true
            });
            _directionsDisplay.setMap(_map);

            var defaultConfig = {
                origin: _currentLocation,
                destination: place.geometry.location,
                travelMode: 'WALKING',
                optimizeWaypoints: true
            }

            var mergedConfig = Object.assign({}, defaultConfig, config)

            directionsService.route(mergedConfig, function (response, status) {
                if (status === 'OK') {
                    _directionsDisplay.setDirections(response);
                }
            });

        }


        function refreshMap() {
            google.maps.event.trigger(_map, 'resize');
        }

        return {
            init: init,
            getMap: getMap,
            addMarkerForPlace: addMarkerForPlace,
            removeMarker: removeMarker,
            removeAllMarkers: removeAllMarkers,
            search: search,
            refreshMap: refreshMap,
            calculateDistance: calculateDistance,
            renderRouteTo: renderRouteTo
        }
    })();
</script>